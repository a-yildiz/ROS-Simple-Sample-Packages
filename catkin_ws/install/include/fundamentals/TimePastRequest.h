// Generated by gencpp from file fundamentals/TimePastRequest.msg
// DO NOT EDIT!


#ifndef FUNDAMENTALS_MESSAGE_TIMEPASTREQUEST_H
#define FUNDAMENTALS_MESSAGE_TIMEPASTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fundamentals
{
template <class ContainerAllocator>
struct TimePastRequest_
{
  typedef TimePastRequest_<ContainerAllocator> Type;

  TimePastRequest_()
    : target_distance(0.0)  {
    }
  TimePastRequest_(const ContainerAllocator& _alloc)
    : target_distance(0.0)  {
  (void)_alloc;
    }



   typedef double _target_distance_type;
  _target_distance_type target_distance;





  typedef boost::shared_ptr< ::fundamentals::TimePastRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fundamentals::TimePastRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TimePastRequest_

typedef ::fundamentals::TimePastRequest_<std::allocator<void> > TimePastRequest;

typedef boost::shared_ptr< ::fundamentals::TimePastRequest > TimePastRequestPtr;
typedef boost::shared_ptr< ::fundamentals::TimePastRequest const> TimePastRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fundamentals::TimePastRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fundamentals::TimePastRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fundamentals::TimePastRequest_<ContainerAllocator1> & lhs, const ::fundamentals::TimePastRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_distance == rhs.target_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fundamentals::TimePastRequest_<ContainerAllocator1> & lhs, const ::fundamentals::TimePastRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fundamentals

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fundamentals::TimePastRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fundamentals::TimePastRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fundamentals::TimePastRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fundamentals::TimePastRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fundamentals::TimePastRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fundamentals::TimePastRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fundamentals::TimePastRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99cf60967b85886d96696de0f9b38d4b";
  }

  static const char* value(const ::fundamentals::TimePastRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99cf60967b85886dULL;
  static const uint64_t static_value2 = 0x96696de0f9b38d4bULL;
};

template<class ContainerAllocator>
struct DataType< ::fundamentals::TimePastRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fundamentals/TimePastRequest";
  }

  static const char* value(const ::fundamentals::TimePastRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fundamentals::TimePastRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 target_distance\n"
;
  }

  static const char* value(const ::fundamentals::TimePastRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fundamentals::TimePastRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimePastRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fundamentals::TimePastRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fundamentals::TimePastRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_distance: ";
    Printer<double>::stream(s, indent + "  ", v.target_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUNDAMENTALS_MESSAGE_TIMEPASTREQUEST_H
